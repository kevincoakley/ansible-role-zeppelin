---
- name: Include OS family specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: Create the zeppelin group
  group:
    name: "{{ zeppelin_service_group }}"
    state: present
    system: yes

- name: Create the zeppelin user
  user:
    name: "{{ zeppelin_service_username }}"
    groups: "{{ zeppelin_service_group }}"
    append: yes
    shell: /bin/bash

- name: Check if Java 8 is available from system repositories (Debian)
  shell: apt-cache search {{ zeppelin_java_8_package }} | grep -qF {{ zeppelin_java_8_package }}
  when: not (zeppelin_java_home | default) and ansible_os_family == 'Debian'
  register: zeppelin_java_8_debian_check
  failed_when: False
  changed_when: False

- name: Check if Java 8 is available from system repositories (RedHat)
  command: yum list {{ zeppelin_java_8_package }}
  when: not (zeppelin_java_home | default) and ansible_os_family == 'RedHat'
  register: zeppelin_java_8_redhat_check
  failed_when: False
  changed_when: False

- name: Install common packages
  package: name={{ item }}
  with_items: "{{ zeppelin_packages }}"

- name: Install Java 8 package
  package: name={{ zeppelin_java_8_package }}
  when: >
    (zeppelin_java_8_debian_check.rc | default) == 0 or
    (zeppelin_java_8_redhat_check.rc | default) == 0
  register: zeppelin_java_8_install

- name: Install Java 7 package
  package: name={{ zeppelin_java_7_package }}
  when: not (zeppelin_java_home | default) and (zeppelin_java_8_install | skipped)

- name: Set Java home from system packages
  set_fact:
    zeppelin_java_home: "{{ zeppelin_java_7_home if zeppelin_java_8_install | skipped else zeppelin_java_8_home }}"
  when: not (zeppelin_java_home | default)
#
# Install Zeppelin
#
- name: Create the zeppelin_working_directory
  file:
    path: "{{ zeppelin_working_directory }}"
    state: directory
    mode: 0755
    owner: "{{ zeppelin_service_username }}"
    group: "{{ zeppelin_service_group }}"

- name: Check if the version of Zeppelin already exists
  stat:
    path: "/opt/zeppelin-{{ zeppelin_version }}-bin-all"
  register: zeppelin_install_path

- name: Download Zeppelin
  get_url:
    url: "{{ zeppelin_download_url }}"
    dest: "/tmp/zeppelin-{{ zeppelin_version }}.tgz"
  when: zeppelin_install_path.stat.exists == False

- name: Extract Zeppelin into the install directory
  unarchive:
    src: "/tmp/zeppelin-{{ zeppelin_version }}.tgz"
    dest: "/opt/"
    copy: no
    owner: "{{ zeppelin_service_username }}"
    group: "{{ zeppelin_service_group }}"
  when: zeppelin_install_path.stat.exists == False

- name: Create a symlink for /opt/zeppelin
  file:
    src: "/opt/zeppelin-{{ zeppelin_version }}-bin-all"
    dest: /opt/zeppelin
    owner: "{{ zeppelin_service_username }}"
    group: "{{ zeppelin_service_group }}"
    state: link
  when: zeppelin_install_path.stat.exists == False

- name: Create the Zeppelin Site config file
  template:
    src: zeppelin-site.xml.j2
    dest: /opt/zeppelin/conf/zeppelin-site.xml
    owner: "{{ zeppelin_service_username }}"
    group: "{{ zeppelin_service_group }}"
    mode: 0644
  notify: restart zeppelin

- name: Create the Zeppelin ENV config file
  template:
    src: zeppelin-env.sh.j2
    dest: /opt/zeppelin/conf/zeppelin-env.sh
    owner: "{{ zeppelin_service_username }}"
    group: "{{ zeppelin_service_group }}"
    mode: 0644
  notify: restart zeppelin

- name: Create the Zeppelin authentication config file
  template:
    src: shiro.ini.j2
    dest: /opt/zeppelin/conf/shiro.ini
    owner: "{{ zeppelin_service_username }}"
    group: "{{ zeppelin_service_group }}"
    mode: 0644
  notify: restart zeppelin

# In order to prevent the "restart zeppelin" handler from running when the "service" tag is skipped, set the
# service_control fact to False and only set the service_control fact to True if the "service" tag isn't skipped.
# In the handler yaml, only run the task when service_control is True.
- name: Set the service_control fact to False
  set_fact: service_control=False

- name: Change the service_control fact to True
  set_fact: service_control=True
  tags:
     - service

- name: Copy the Zeppelin systemd service file
  template:
    src: zeppelin.service.j2
    dest: /etc/systemd/system/zeppelin.service
    owner: root
    group: root
    mode: 0644
  when: ansible_distribution_version != '14.04'
  tags:
    - service

- name: Copy the Upstart service file
  template:
    src: zeppelin.upstart.conf.j2
    dest: /etc/init/zeppelin.conf
    owner: root
    group: root
    mode: 0644
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '14.04'
  register: upstart
  tags:
    - service

- name: Reload Upstart Configuration
  command: /sbin/initctl reload-configuration
  when: upstart.changed
  tags:
    - service

- name: Ensure Zeppelin is started and enabled on boot
  service:
    name: zeppelin
    state: started
    enabled: yes
  tags:
     - service
